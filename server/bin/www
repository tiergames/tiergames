#!/usr/bin/env node

const http = require('http');
const socketIO = require("socket.io")
let app = require('../app');
const { OnlineUsers } = require('./../classes/OnlineUsers')
const { Room } = require("./../classes/Room")

app.use((req, res, next) => {
  res.status(404).json({error: 'not-found'});
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  if (!res.headersSent) {
    res.status(500).json({error: 'error'});
  }
});

let server = http.createServer(app);
const io = socketIO(server)

let onlineUsers = new OnlineUsers()
let room = new Room()

io.on('connection', (client) => {

  client.on('new-follower', (data) => {
    client.broadcast.emit('new-follower', data)
  })
  
  client.on('user-join-room', async (data) => {

    // Add user to the room
    client.join(data.room);

    
    // Get the room messages to the client
    let allMessages = await room.getMessagesPerRoom(data.room)
    // client.broadcast.to(data.room).emit('get-room-messages', { messages: allMessages })
    client.emit('get-room-messages', { messages: allMessages })

    // Add client to the online users
    onlineUsers.addUser(client.id, data.username, data.room)

    // Send the users connected to the room (also emit to the user itself)
    client.broadcast.to(data.room).emit('user-join-room', { currentOnlineUsers: onlineUsers.getUsersPerRoom(data.room) })
    client.emit('user-join-room', { currentOnlineUsers: onlineUsers.getUsersPerRoom(data.room) })
    
    client.on('user-send-message-room', (data) => {
      console.log('User send message room', data)

      let newMessage = room.saveMessage(
        data.content,
        onlineUsers.getUserInfo(client.id).username,
        data.room,
      )

      console.log("Message saved")
  
      client.broadcast.to(onlineUsers.getUserInfo(client.id).room).emit('user-send-message-room', data)
      client.emit('user-send-message-room', data)
    })

    client.on('user-left-room', (data) => {
      let leftUser = onlineUsers.removeUser(client.id)

      // Notify the rest of the users the current online users
      client.broadcast.to(leftUser.room).emit('update-online-users', { currentOnlineUsers: onlineUsers.getUsersPerRoom(leftUser.room) })
    })
  })

  client.on('disconnect', () => {
    console.log("THE USER LEFT", onlineUsers.getUserInfo(client.id))

    // Check if the user was in the chat
    if (onlineUsers.getUserInfo(client.id)) {
      let userDisconnected = onlineUsers.removeUser(client.id)

      client.broadcast.to(userDisconnected.room).emit('update-online-users', { currentOnlineUsers: onlineUsers.getUsersPerRoom(userDisconnected.room) })
    }
  })
})

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
